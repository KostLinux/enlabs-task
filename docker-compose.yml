services:
  api:
    build:
      context: .
      dockerfile: dev.Dockerfile
    volumes:
      - ./:/app
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      - GO_ENV=${ENVIRONMENT:-development}
      - API_PORT=${API_PORT:-8080}
      - SERVER_READ_TIMEOUT=${SERVER_READ_TIMEOUT:-10s}
      - SERVER_WRITE_TIMEOUT=${SERVER_WRITE_TIMEOUT:-10s}
      - DB_HOST=db
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-postgres}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
      - DB_MAX_OPEN_CONNS=${DB_MAX_OPEN_CONNS:-25}
      - DB_MAX_IDLE_CONNS=${DB_MAX_IDLE_CONNS:-5}
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=${DB_NAME:-transactions}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_PORT=${DB_PORT:-5432}
    env_file:
      - .env
    ports:
      - "${DB_PORT_EXTERNAL:-5432}:5432"
    volumes:
      - ${POSTGRES_DATA_PATH:-./postgres-data}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: ${HEALTHCHECK_INTERVAL:-5s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    restart: unless-stopped
    networks:
      - app-network

  migrations:
    build:
      context: .
      dockerfile: dev.Dockerfile
    environment:
      - DB_HOST=db
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-postgres}
      - DB_SSLMODE=${DB_SSLMODE:-disable}
    env_file:
      - .env
    command: > 
      sh -c "set -e && 
            echo 'Running schema migrations...' &&
            goose -dir ${SCHEMA_MIGRATIONS_DIR:-./migrations/schema} postgres 'user=${DB_USER:-postgres} password=${DB_PASSWORD:-postgres} host=db port=${DB_PORT:-5432} dbname=${DB_NAME:-postgres} sslmode=${DB_SSLMODE:-disable}' up &&
            echo 'Schema migrations completed successfully!' &&
            echo 'Running development data migrations...' &&
            goose -dir ${DEV_MIGRATIONS_DIR:-./migrations/development} postgres 'user=${DB_USER:-postgres} password=${DB_PASSWORD:-postgres} host=db port=${DB_PORT:-5432} dbname=${DB_NAME:-postgres} sslmode=${DB_SSLMODE:-disable}' up &&
            echo 'All migrations completed successfully!'"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres-data:
    name: ${POSTGRES_VOLUME_NAME:-transactions_postgres_data}

networks:
  app-network:
    driver: bridge