services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        TARGETOS: ${TARGETOS:-linux}
        TARGETARCH: ${TARGETARCH:-amd64}
    ports:
      - "${API_PORT:-8080}:8080"
    env_file:
      - .env
    environment:
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - app-network

  # Database service
  db:
    image: postgres:14-alpine
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-transactions}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "${DB_PORT_EXTERNAL:-5432}:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network

  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      DB_HOST: db
    command: > 
      sh -c "set -e && 
            echo 'Running schema migrations...' &&
            goose -dir ./migrations/schema postgres 'user=$DB_USER password=$DB_PASSWORD host=db port=$DB_PORT dbname=$DB_NAME sslmode=$DB_SSLMODE' up &&
            echo 'Schema migrations completed successfully!' &&
            echo 'Running development data migrations...' &&
            goose -dir ./migrations/development postgres 'user=$DB_USER password=$DB_PASSWORD host=db port=$DB_PORT dbname=$DB_NAME sslmode=$DB_SSLMODE' up &&
            echo 'All migrations completed successfully!'"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

volumes:
  postgres-data:
    name: ${POSTGRES_VOLUME_NAME:-transactions_postgres_data}

networks:
  app-network:
    driver: bridge